openapi: 3.0.2
info:
  contact:
    email: hirose31@gmail.com
  description: |
    This is a yet another example pet store API server using
    [Connexion](https://github.com/zalando/connexion) .

    - [Repository](https://github.com/hirose31/connexion-tiny-petstore)

    # search resource expression

    ## examples


    ```jsonc
    // WHERE name = 'foo' AND age > 20
    {
        "name": "foo",
        "age": {">": 20}
    }
    ```

    ```jsonc
    // WHERE addresses.email like "%@example.org"
    {
        "addresses.email": {"like": "%@example.org"}
    }
    ```

    ```jsonc
    // WHERE age >= 6 AND age <= 12
    {
        "age": ["and", {">=": 6}, {"<=": 12}]
    }
    ```

    ## rules

    ```
    // FILTER
    {
        ATTR: EXPR,
        ATTR: EXPR,
        ...
    }
    ```

    ```
    // ATTR
    column_name
    joined_table.column_name
    ```

    ```
    // EXPR
    // comparison expr
    { OP: VALUE }
    { OP: [VALUE, VALUE, ...] }
    VALUE # shorthand for { "==": VALUE }

    // boolean expr
    ["or", EXPR, EXPR, ...]
    ["and", EXPR, EXPR, ...]
    ```

    ```
    // OP
    ==
    !=
    in
    !in
    >
    >=
    <
    <=
    like
    !like
    ```
  license:
    name: MIT
    url: https://opensource.org/licenses/mit-license.php
  title: Tiny Pet Store
  version: 3.0.0
servers:
- url: /v3
tags:
- description: Everything about your Pets
  name: pet
- description: Access to Pet store
  name: store
paths:
  /pets:
    get:
      description: |
        Returns all pets.
      operationId: fetch_all_pets
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: successful operation
      summary: Returns pets
      tags:
      - pet
      x-openapi-router-controller: tiny_petstore.controllers.pet_controller
    post:
      operationId: create_pet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetNew'
        description: Pet object that needs to be added to the store
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        400:
          description: Bad Request
      summary: Add a new pet to the store
      tags:
      - pet
      x-openapi-router-controller: tiny_petstore.controllers.pet_controller
  /pets/{id}:
    delete:
      operationId: delete_pet
      parameters:
      - description: Pet id to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        204:
          description: successful operation (No Content)
        400:
          description: Invalid pet value
      summary: Deletes a pet
      tags:
      - pet
      x-openapi-router-controller: tiny_petstore.controllers.pet_controller
    get:
      description: Returns a single pet
      operationId: fetch_pet
      parameters:
      - description: ID of pet to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      summary: Find pet by ID
      tags:
      - pet
      x-openapi-router-controller: tiny_petstore.controllers.pet_controller
    patch:
      operationId: update_pet
      parameters:
      - description: ID of pet that needs to be updated
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetUpdate'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        400:
          description: Bad Request
        404:
          description: Not Found
      summary: Updates a pet
      tags:
      - pet
      x-openapi-router-controller: tiny_petstore.controllers.pet_controller
  /search/pets:
    post:
      description: |
        Returns pets which matched by search conditions.
      operationId: search_pets
      requestBody:
        content:
          application/json:
            schema:
              example:
                store.name:
                  like: '%Pet%'
                status:
                  in:
                  - pending
                  - sold
              type: object
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: successful operation
      summary: Returns pets matched search conditions
      tags:
      - pet
      x-openapi-router-controller: tiny_petstore.controllers.pet_controller
  /stores:
    get:
      description: |
        Returns all stores.
      operationId: fetch_all_stores
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Store'
                type: array
          description: successful operation
      summary: Returns stores
      tags:
      - store
      x-openapi-router-controller: tiny_petstore.controllers.store_controller
    post:
      operationId: create_store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreNew'
        description: Store object that needs to be added to the store
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
          description: successful operation
        400:
          description: Bad Request
      summary: Add a new store to the store
      tags:
      - store
      x-openapi-router-controller: tiny_petstore.controllers.store_controller
  /stores/{id}:
    delete:
      operationId: delete_store
      parameters:
      - description: Store id to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        204:
          description: successful operation (No Content)
        400:
          description: Invalid store value
      summary: Deletes a store
      tags:
      - store
      x-openapi-router-controller: tiny_petstore.controllers.store_controller
    get:
      description: Returns a single store
      operationId: fetch_store
      parameters:
      - description: ID of store to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
          description: successful operation
        400:
          description: Invalid ID supplied
        404:
          description: Store not found
      summary: Find store by ID
      tags:
      - store
      x-openapi-router-controller: tiny_petstore.controllers.store_controller
    patch:
      operationId: update_store
      parameters:
      - description: ID of store that needs to be updated
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUpdate'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
          description: successful operation
        400:
          description: Bad Request
        404:
          description: Not Found
      summary: Updates a store
      tags:
      - store
      x-openapi-router-controller: tiny_petstore.controllers.store_controller
  /search/stores:
    post:
      description: |
        Returns stores which matched by search conditions.
      operationId: search_stores
      requestBody:
        content:
          application/json:
            schema:
              example:
                name:
                  like: '%Pet%'
                address:
                  ==: Tokyo
              type: object
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Store'
                type: array
          description: successful operation
      summary: Returns stores matched search conditions
      tags:
      - store
      x-openapi-router-controller: tiny_petstore.controllers.store_controller
components:
  schemas:
    PetCore:
      properties:
        name:
          example: tama
          pattern: ^[A-Za-z0-9]
          type: string
        status:
          default: pending
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
          example: available
          type: string
      type: object
    PetNew:
      allOf:
      - $ref: '#/components/schemas/PetCore'
      - $ref: '#/components/schemas/StoreRef'
      - required:
        - name
        - store.name
    Pet:
      allOf:
      - $ref: '#/components/schemas/PetCore'
      - properties:
          id:
            example: 1
            format: int64
            type: integer
          store:
            $ref: '#/components/schemas/Store'
    PetUpdate:
      allOf:
      - $ref: '#/components/schemas/PetCore'
      - $ref: '#/components/schemas/StoreRef'
    StoreCore:
      properties:
        name:
          example: The Pet Mansion
          pattern: ^[A-Za-z0-9]
          type: string
        address:
          example: Tokyo
          type: string
      type: object
    StoreNew:
      allOf:
      - $ref: '#/components/schemas/StoreCore'
      - required:
        - address
        - name
    Store:
      allOf:
      - $ref: '#/components/schemas/StoreCore'
      - properties:
          id:
            example: 1
            format: int64
            type: integer
    StoreUpdate:
      allOf:
      - $ref: '#/components/schemas/StoreCore'
    StoreRef:
      properties:
        store.name:
          example: The Pet Mansion
          pattern: ^[A-Za-z0-9]
          type: string
      type: object
