---
swagger: "2.0"
info:
  description: "This is a yet another example pet store API server using [Connexion](https://github.com/zalando/connexion)\
    \ .\n\n- [Repository](https://github.com/hirose31/connexion-tiny-petstore)\n\n\
    # search resource expression\n\n## examples\n\n```jsonc\n// WHERE name = 'foo'\
    \ AND age > 20\n{\n    \"name\": \"foo\",\n    \"age\": {\">\": 20}\n}\n```\n\n\
    ```jsonc\n// WHERE addresses.email like \"%@example.org\"\n{\n    \"addresses.email\"\
    : {\"like\": \"%@example.org\"}\n}\n```\n\n```jsonc\n// WHERE age >= 6 AND age\
    \ <= 12\n{\n    \"age\": [\"and\", {\">=\": 6}, {\"<=\": 12}]\n}\n```\n\n## rules\n\
    \n```\n// FILTER\n{\n    ATTR: EXPR,\n    ATTR: EXPR,\n    ...\n}\n```\n\n```\n\
    // ATTR\ncolumn_name\njoined_table.column_name\n```\n\n```\n// EXPR\n// comparison\
    \ expr\n{ OP: VALUE }\n{ OP: [VALUE, VALUE, ...] }\nVALUE # shorthand for { \"\
    ==\": VALUE }\n\n// boolean expr\n[\"or\", EXPR, EXPR, ...]\n[\"and\", EXPR, EXPR,\
    \ ...]\n```\n\n```\n// OP\n==\n!=\nin\n!in\n>\n>=\n<\n<=\nlike\n!like\n```\n"
  version: "2.0.0"
  title: "Tiny Pet Store"
  contact:
    email: "hirose31@gmail.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/mit-license.php"
basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your Pets"
- name: "store"
  description: "Access to Pet store"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /pets:
    get:
      tags:
      - "pet"
      summary: "Returns pets"
      description: "Returns all pets.\n"
      operationId: "fetch_all_pets"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
      x-swagger-router-controller: "tiny_petstore.controllers.pet_controller"
    post:
      tags:
      - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "create_pet"
      parameters:
      - in: "body"
        name: "create_order"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/PetCreateParam"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Bad Request"
      x-swagger-router-controller: "tiny_petstore.controllers.pet_controller"
  /pets/{id}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "fetch_pet"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      x-swagger-router-controller: "tiny_petstore.controllers.pet_controller"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "delete_pet"
      parameters:
      - name: "id"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "successful operation"
        400:
          description: "Invalid pet value"
      x-swagger-router-controller: "tiny_petstore.controllers.pet_controller"
    patch:
      tags:
      - "pet"
      summary: "Updates a pet"
      description: ""
      operationId: "update_pet"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "update_order"
        required: true
        schema:
          $ref: "#/definitions/PetParam"
        x-nullable: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
      x-swagger-router-controller: "tiny_petstore.controllers.pet_controller"
  /search/pets:
    post:
      tags:
      - "pet"
      summary: "Returns pets matched search conditions"
      description: "Returns pets which matched by search conditions.\n"
      operationId: "search_pets"
      parameters:
      - in: "body"
        name: "search_order"
        required: false
        schema:
          type: "object"
          example:
            store.name:
              like: "%Pet%"
            status:
              in:
              - "pending"
              - "sold"
        x-nullable: true
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
      x-swagger-router-controller: "tiny_petstore.controllers.pet_controller"
  /stores:
    get:
      tags:
      - "store"
      summary: "Returns stores"
      description: "Returns all stores.\n"
      operationId: "fetch_all_stores"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Store"
      x-swagger-router-controller: "tiny_petstore.controllers.store_controller"
    post:
      tags:
      - "store"
      summary: "Add a new store to the store"
      description: ""
      operationId: "create_store"
      parameters:
      - in: "body"
        name: "create_order"
        description: "Store object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/StoreCreateParam"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        400:
          description: "Bad Request"
      x-swagger-router-controller: "tiny_petstore.controllers.store_controller"
  /stores/{id}:
    get:
      tags:
      - "store"
      summary: "Find store by ID"
      description: "Returns a single store"
      operationId: "fetch_store"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of store to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Store not found"
      x-swagger-router-controller: "tiny_petstore.controllers.store_controller"
    delete:
      tags:
      - "store"
      summary: "Deletes a store"
      description: ""
      operationId: "delete_store"
      parameters:
      - name: "id"
        in: "path"
        description: "Store id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "successful operation"
        400:
          description: "Invalid store value"
      x-swagger-router-controller: "tiny_petstore.controllers.store_controller"
    patch:
      tags:
      - "store"
      summary: "Updates a store"
      description: ""
      operationId: "update_store"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of store that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "update_order"
        required: true
        schema:
          $ref: "#/definitions/StoreParam"
        x-nullable: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        400:
          description: "Bad Request"
        404:
          description: "Not Found"
      x-swagger-router-controller: "tiny_petstore.controllers.store_controller"
  /search/stores:
    post:
      tags:
      - "store"
      summary: "Returns stores matched search conditions"
      description: "Returns stores which matched by search conditions.\n"
      operationId: "search_stores"
      parameters:
      - in: "body"
        name: "search_order"
        required: false
        schema:
          type: "object"
          example:
            name:
              like: "%Pet%"
            address:
              ==: "Tokyo"
        x-nullable: true
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Store"
      x-swagger-router-controller: "tiny_petstore.controllers.store_controller"
definitions:
  Pet:
    type: "object"
    required:
    - "name"
    - "store"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "tama"
        pattern: "^[A-Za-z0-9]"
        x-regex: "^[A-Za-z0-9]"
        x-modifiers: []
      store:
        $ref: "#/definitions/Store"
      status:
        type: "string"
        description: "pet status in the store"
        default: "pending"
        enum:
        - "available"
        - "pending"
        - "sold"
    title: "Pet"
    description: "A pet for sale in the pet store"
    example:
      name: "tama"
      id: 0
      store:
        address: "Tokyo"
        name: "Pets Unlimited"
        id: 6
      status: "pending"
  PetCreateParam:
    type: "object"
    required:
    - "name"
    - "store.name"
    properties:
      name:
        type: "string"
        example: "tama"
        pattern: "^[A-Za-z0-9]"
        x-regex: "^[A-Za-z0-9]"
        x-modifiers: []
      store.name:
        type: "string"
        example: "Pets Unlimited"
        pattern: "^[A-Za-z0-9]"
        x-regex: "^[A-Za-z0-9]"
        x-modifiers: []
      status:
        type: "string"
        enum:
        - "available"
        - "pending"
        - "sold"
    title: "_petCreateParam"
    example:
      name: "mike"
      store.name: "The Pet Mansion"
      status: "available"
  PetParam:
    type: "object"
    properties:
      name:
        type: "string"
        example: "tama"
        pattern: "^[A-Za-z0-9]"
        x-regex: "^[A-Za-z0-9]"
        x-modifiers: []
      store.name:
        type: "string"
        example: "Pets Unlimited"
        pattern: "^[A-Za-z0-9]"
        x-regex: "^[A-Za-z0-9]"
        x-modifiers: []
      status:
        type: "string"
        enum:
        - "available"
        - "pending"
        - "sold"
    title: "_petParam"
    example:
      name: "mike"
      store.name: "The Pet Mansion"
      status: "available"
  Store:
    type: "object"
    required:
    - "address"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Pets Unlimited"
        pattern: "^[A-Za-z0-9]"
        x-regex: "^[A-Za-z0-9]"
        x-modifiers: []
      address:
        type: "string"
        example: "Tokyo"
    title: "Store"
    description: "A pet store"
    example:
      address: "Tokyo"
      name: "Pets Unlimited"
      id: 6
  StoreCreateParam:
    type: "object"
    required:
    - "address"
    - "name"
    properties:
      name:
        type: "string"
        example: "Pets Unlimited"
        pattern: "^[A-Za-z0-9]"
        x-regex: "^[A-Za-z0-9]"
        x-modifiers: []
      address:
        type: "string"
        example: "Tokyo"
    title: "_storeCreateParam"
    example:
      name: "The Pet Mansion"
      address: "Tokyo"
  StoreParam:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Pets Unlimited"
        pattern: "^[A-Za-z0-9]"
        x-regex: "^[A-Za-z0-9]"
        x-modifiers: []
      address:
        type: "string"
        example: "Tokyo"
    title: "_storeParam"
    example:
      name: "The Pet Mansion"
parameters:
  SearchPets:
    in: "body"
    name: "search_order"
    required: false
    schema:
      type: "object"
      example:
        store.name:
          like: "%Pet%"
        status:
          in:
          - "pending"
          - "sold"
    x-nullable: true
  SearchStores:
    in: "body"
    name: "search_order"
    required: false
    schema:
      type: "object"
      example:
        name:
          like: "%Pet%"
        address:
          ==: "Tokyo"
    x-nullable: true
