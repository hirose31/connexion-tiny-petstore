# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tiny_petstore.models.base_model_ import Model
import re  # noqa: F401,E501
from tiny_petstore import util


class StoreCreateParam(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, address: str=None):  # noqa: E501
        """StoreCreateParam - a model defined in Swagger

        :param name: The name of this StoreCreateParam.  # noqa: E501
        :type name: str
        :param address: The address of this StoreCreateParam.  # noqa: E501
        :type address: str
        """
        self.swagger_types = {
            'name': str,
            'address': str
        }

        self.attribute_map = {
            'name': 'name',
            'address': 'address'
        }

        self._name = name
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'StoreCreateParam':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StoreCreateParam of this StoreCreateParam.  # noqa: E501
        :rtype: StoreCreateParam
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this StoreCreateParam.


        :return: The name of this StoreCreateParam.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this StoreCreateParam.


        :param name: The name of this StoreCreateParam.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and not re.search('^[A-Za-z0-9]', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9]/`")  # noqa: E501

        self._name = name

    @property
    def address(self) -> str:
        """Gets the address of this StoreCreateParam.


        :return: The address of this StoreCreateParam.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this StoreCreateParam.


        :param address: The address of this StoreCreateParam.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address
