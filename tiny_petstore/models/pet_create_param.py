# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tiny_petstore.models.base_model_ import Model
import re  # noqa: F401,E501
from tiny_petstore import util


class PetCreateParam(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, store_name: str=None, status: str=None):  # noqa: E501
        """PetCreateParam - a model defined in Swagger

        :param name: The name of this PetCreateParam.  # noqa: E501
        :type name: str
        :param store_name: The store_name of this PetCreateParam.  # noqa: E501
        :type store_name: str
        :param status: The status of this PetCreateParam.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'name': str,
            'store_name': str,
            'status': str
        }

        self.attribute_map = {
            'name': 'name',
            'store_name': 'store.name',
            'status': 'status'
        }

        self._name = name
        self._store_name = store_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'PetCreateParam':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PetCreateParam of this PetCreateParam.  # noqa: E501
        :rtype: PetCreateParam
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this PetCreateParam.


        :return: The name of this PetCreateParam.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PetCreateParam.


        :param name: The name of this PetCreateParam.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and not re.search('^[A-Za-z0-9]', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9]/`")  # noqa: E501

        self._name = name

    @property
    def store_name(self) -> str:
        """Gets the store_name of this PetCreateParam.


        :return: The store_name of this PetCreateParam.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name: str):
        """Sets the store_name of this PetCreateParam.


        :param store_name: The store_name of this PetCreateParam.
        :type store_name: str
        """
        if store_name is None:
            raise ValueError("Invalid value for `store_name`, must not be `None`")  # noqa: E501
        if store_name is not None and not re.search('^[A-Za-z0-9]', store_name):  # noqa: E501
            raise ValueError("Invalid value for `store_name`, must be a follow pattern or equal to `/^[A-Za-z0-9]/`")  # noqa: E501

        self._store_name = store_name

    @property
    def status(self) -> str:
        """Gets the status of this PetCreateParam.


        :return: The status of this PetCreateParam.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this PetCreateParam.


        :param status: The status of this PetCreateParam.
        :type status: str
        """
        allowed_values = ["available", "pending", "sold"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
