openapi: 3.0.2
info:
  title: Tiny Pet Store
  version: 3.0.0
  contact:
    email: hirose31@gmail.com
  description: |
    This is a yet another example pet store API server using
    [Connexion](https://github.com/zalando/connexion) .

    - [Repository](https://github.com/hirose31/connexion-tiny-petstore)

    # search resource expression

    ## examples


    ```jsonc
    // WHERE name = 'foo' AND age > 20
    {
        "name": "foo",
        "age": {">": 20}
    }
    ```

    ```jsonc
    // WHERE addresses.email like "%@example.org"
    {
        "addresses.email": {"like": "%@example.org"}
    }
    ```

    ```jsonc
    // WHERE age >= 6 AND age <= 12
    {
        "age": ["and", {">=": 6}, {"<=": 12}]
    }
    ```

    ## rules

    ```
    // FILTER
    {
        ATTR: EXPR,
        ATTR: EXPR,
        ...
    }
    ```

    ```
    // ATTR
    column_name
    joined_table.column_name
    ```

    ```
    // EXPR
    // comparison expr
    { OP: VALUE }
    { OP: [VALUE, VALUE, ...] }
    VALUE # shorthand for { "==": VALUE }

    // boolean expr
    ["or", EXPR, EXPR, ...]
    ["and", EXPR, EXPR, ...]
    ```

    ```
    // OP
    ==
    !=
    in
    !in
    >
    >=
    <
    <=
    like
    !like
    ```
  license:
    name: MIT
    url: 'https://opensource.org/licenses/mit-license.php'

tags:
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Access to Pet store

servers:
  - url: /v3

paths:
  /pets:
    get:
      tags:
        - pet
      summary: Returns pets
      description: |
        Returns all pets.
      operationId: fetchAllPets
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: ''
      operationId: createPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetNew'
        description: Pet object that needs to be added to the store
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Bad Request
  '/pets/{id}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: fetchPet
      parameters:
        - name: id
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    patch:
      tags:
        - pet
      summary: Updates a pet
      description: ''
      operationId: updatePet
      parameters:
        - name: id
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetUpdate'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ''
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: successful operation (No Content)
        '400':
          description: Invalid pet value
  /search/pets:
    post:
      tags:
        - pet
      summary: Returns pets matched search conditions
      description: |
        Returns pets which matched by search conditions.
      operationId: searchPets
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                store.name:
                  like: '%Pet%'
                status:
                  in:
                    - pending
                    - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
  /stores:
    get:
      tags:
        - store
      summary: Returns stores
      description: |
        Returns all stores.
      operationId: fetchAllStores
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
    post:
      tags:
        - store
      summary: Add a new store to the store
      description: ''
      operationId: createStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreNew'
        description: Store object that needs to be added to the store
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          description: Bad Request
  '/stores/{id}':
    get:
      tags:
        - store
      summary: Find store by ID
      description: Returns a single store
      operationId: fetchStore
      parameters:
        - name: id
          in: path
          description: ID of store to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          description: Invalid ID supplied
        '404':
          description: Store not found
    patch:
      tags:
        - store
      summary: Updates a store
      description: ''
      operationId: updateStore
      parameters:
        - name: id
          in: path
          description: ID of store that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreUpdate'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - store
      summary: Deletes a store
      description: ''
      operationId: deleteStore
      parameters:
        - name: id
          in: path
          description: Store id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: successful operation (No Content)
        '400':
          description: Invalid store value
  /search/stores:
    post:
      tags:
        - store
      summary: Returns stores matched search conditions
      description: |
        Returns stores which matched by search conditions.
      operationId: searchStores
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name:
                  like: '%Pet%'
                address:
                  ==: Tokyo
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'

components:
  schemas:
    PetCore:
      type: object
      properties:
        name:
          type: string
          pattern: '^[A-Za-z0-9]'
          example: tama
        status:
          type: string
          description: pet status in the store
          default: pending
          enum:
            - available
            - pending
            - sold
          example: available
    PetNew:
      allOf:
        - $ref: '#/components/schemas/PetCore'
        - $ref: '#/components/schemas/StoreRef'
        - required:
          - name
          - store.name
    Pet:
      allOf:
        - $ref: '#/components/schemas/PetCore'
        - properties:
            id:
              type: integer
              format: int64
              example: 1
            store:
              $ref: '#/components/schemas/Store'
    PetUpdate:
      allOf:
        - $ref: '#/components/schemas/PetCore'
        - $ref: '#/components/schemas/StoreRef'

    StoreCore:
      type: object
      properties:
        name:
          type: string
          pattern: '^[A-Za-z0-9]'
          example: The Pet Mansion
        address:
          type: string
          example: Tokyo
    StoreNew:
      allOf:
        - $ref: '#/components/schemas/StoreCore'
        - required:
          - name
          - address
    Store:
      allOf:
        - $ref: '#/components/schemas/StoreCore'
        - properties:
            id:
              type: integer
              format: int64
              example: 1
    StoreUpdate:
      allOf:
        - $ref: '#/components/schemas/StoreCore'
    StoreRef:
      type: object
      properties:
        store.name:
          type: string
          pattern: '^[A-Za-z0-9]'
          example: The Pet Mansion
